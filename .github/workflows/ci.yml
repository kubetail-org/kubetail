name: ci

permissions:
  contents: read

on:
  pull_request:
    branches:
      - "**"

jobs:
  crates-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, ubuntu-24.04-arm]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-rust: "true"
          setup-protoc: "true"
      - name: Build
        working-directory: ./crates/rgkl
        run: cargo build --release

  crates-lint:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-rust: "true"
          setup-protoc: "true"
      - name: Run format check
        working-directory: ./crates/rgkl
        run: cargo fmt --all -- --check

  crates-vet:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-rust: "true"
          setup-protoc: "true"
      - name: Run clippy
        working-directory: ./crates/rgkl
        run: cargo clippy --all -- -D warnings

  crates-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, ubuntu-24.04-arm]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-rust: "true"
          setup-protoc: "true"
      - name: Run tests
        working-directory: ./crates/rgkl
        run: cargo test

  modules-lint:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        module: [cli, cluster-agent, cluster-api, dashboard, shared]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-go: "true"
      - name: Run linter for ${{ matrix.module }}
        working-directory: ./modules/${{ matrix.module }}
        run: test -z "$(gofmt -l .)"

  modules-vet:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        module: [cli, cluster-agent, cluster-api, dashboard, shared]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-go: "true"
      - name: Vet ${{ matrix.module }}
        working-directory: ./modules/${{ matrix.module }}
        run: go vet ./...

  modules-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, ubuntu-24.04-arm, macos-15, macos-14, macos-13, windows-latest]
        module: [cli, cluster-agent, cluster-api, dashboard, shared]
        exclude:
          - os: macos-15
            module: cluster-api
          - os: macos-15
            module: cluster-agent
          - os: macos-14
            module: cluster-api
          - os: macos-14
            module: cluster-agent
          - os: macos-13
            module: cluster-api
          - os: macos-13
            module: cluster-agent
          - os: windows-latest
            module: cluster-api
          - os: windows-latest
            module: cluster-agent
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-go: "true"
      - name: Run tests for ${{ matrix.module }}
        working-directory: ./modules/${{ matrix.module }}
        run: go test -race -timeout 5m ./...

  dashboard-ui-lint:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-node: "true"
      - name: Install dependencies
        working-directory: ./dashboard-ui
        run: pnpm install --frozen-lockfile
      - name: Lint
        working-directory: ./dashboard-ui
        run: pnpm lint

  dashboard-ui-test:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-node: "true"
      - name: Install dependencies
        working-directory: ./dashboard-ui
        run: pnpm install --frozen-lockfile
      - name: Test
        working-directory: ./dashboard-ui
        run: pnpm test run

  dashboard-ui-build:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-node: "true"
      - name: Install dependencies
        working-directory: ./dashboard-ui
        run: pnpm install --frozen-lockfile
      - name: Build
        working-directory: ./dashboard-ui
        run: pnpm build

  docker-builds:
    needs:
      - crates-build
      - crates-lint
      - crates-vet
      - crates-test
      - modules-lint
      - modules-vet
      - modules-test
      - dashboard-ui-lint
      - dashboard-ui-test
      - dashboard-ui-build
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 20
    strategy:
      matrix:
        build:
          - name: dashboard-final
            image: dashboard
            target: final
            dockerfile: build/package/Dockerfile.dashboard
          - name: dashboard-debug
            image: dashboard
            target: debug
            dockerfile: build/package/Dockerfile.dashboard
          - name: cluster-api-final
            image: cluster-api
            target: final
            dockerfile: build/package/Dockerfile.cluster-api
          - name: cluster-agent-final
            image: cluster-agent
            target: final
            dockerfile: build/package/Dockerfile.cluster-agent
        runner: [ubuntu-24.04, ubuntu-24.04-arm]
        include:
          - runner: ubuntu-24.04
            platform: linux/amd64
            arch: amd64
          - runner: ubuntu-24.04-arm
            platform: linux/arm64
            arch: arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: kubetail-${{ matrix.build.image }}
          tags: |
            type=ref,event=pr,suffix=-${{ matrix.build.target }}
            type=raw,value=${{ matrix.build.target }}-{{sha}}
          flavor: |
            suffix=-${{ matrix.arch }}

      - name: Build ${{ matrix.build.image }} (${{ matrix.build.target }}) natively for ${{ matrix.arch }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.build.dockerfile }}
          platforms: ${{ matrix.platform }}
          target: ${{ matrix.build.target }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.build.image }}-${{ matrix.build.target }}-${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=${{ matrix.build.image }}-${{ matrix.build.target }}-${{ matrix.arch }}

  cli-builds:
    needs:
      - crates-build
      - crates-lint
      - crates-vet
      - crates-test
      - modules-lint
      - modules-vet
      - modules-test
      - dashboard-ui-lint
      - dashboard-ui-test
      - dashboard-ui-build
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            platform: linux-amd64
          - os: ubuntu-24.04-arm
            platform: linux-arm64
          - os: macos-15
            platform: macos-arm64
          - os: macos-14
            platform: macos-arm64
          - os: macos-13
            platform: macos-amd64
          - os: windows-latest
            platform: windows-amd64
          - os: windows-11-arm
            platform: windows-arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-node: "true"
          setup-go: "true"
      - name: Build CLI for ${{ matrix.platform }}
        run: make build
        env:
          PLATFORM: ${{ matrix.platform }}

  test-e2e:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-node: "true"
          setup-go: "true"
      - name: Setup k3s cluster using k3d
        uses: AbsaOSS/k3d-action@v2.4.0
        with:
          cluster-name: "kubetail-test-cluster"
          args: --agents 1
      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: v1.33.1
      - name: Test the kubetail logs command
        run: make test-e2e
