name: ci

on:
  pull_request:
    branches:
      - '**'

jobs:
  backend-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21.6'
      - name: Run linter
        working-directory: ./backend
        run: |
          test -z $(gofmt -l .)

  backend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21.6'
      - name: Run tests
        working-directory: ./backend
        run: |
          go test -race ./...

  backend-vet:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21.6'
      - name: Run code vetter
        working-directory: ./backend
        run: |
          go vet ./...

  frontend-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: pnpm/action-setup@v3
        with:
          version: 8
      - name: Set up and run linter
        working-directory: ./frontend
        run: |
          pnpm install
          pnpm lint

  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: pnpm/action-setup@v3
        with:
          version: 8
      - name: Set up and run tests
        working-directory: ./frontend
        run: |
          pnpm install
          pnpm test run

  frontend-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: pnpm/action-setup@v3
        with:
          version: 8
      - name: Set up and run build script
        working-directory: ./frontend
        run: |
          pnpm install
          pnpm build

  build-amd64:
    needs:
      - backend-lint
      - backend-test
      - backend-vet
      - frontend-lint
      - frontend-test
      - frontend-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: kubetail:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-arm64:
    needs:
      - backend-lint
      - backend-test
      - backend-vet
      - frontend-lint
      - frontend-test
      - frontend-build
    runs-on: ubuntu-arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker
        run: |
          # Add Docker's official GPG key:
          sudo apt-get update
          sudo apt-get install ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          
          # Add the repository to Apt sources:
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update

          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
      
          sudo usermod -aG docker $USER
          sudo apt-get install acl
          sudo setfacl --modify user:$USER:rw /var/run/docker.sock
      - name: Build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: kubetail:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
