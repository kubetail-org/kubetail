name: ci

permissions:
  contents: read

on:
  pull_request:
    branches:
      - '**'

jobs:
  crates-build:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-rust: 'true'
          setup-protoc: 'true'
      - name: Build
        working-directory: ./crates/rgkl
        run: cargo build --release

  crates-lint:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-rust: 'true'
          setup-protoc: 'true'
      - name: Run format check
        working-directory: ./crates/rgkl
        run: cargo fmt --all -- --check

  crates-vet:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-rust: 'true'
          setup-protoc: 'true'
      - name: Run clippy
        working-directory: ./crates/rgkl
        run: cargo clippy --all -- -D warnings

  crates-test:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-rust: 'true'
          setup-protoc: 'true'
      - name: Run tests
        working-directory: ./crates/rgkl
        run: cargo test

  modules-lint:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-go: 'true'
      - name: Run linter
        working-directory: ./modules
        run: test -z "$(gofmt -l .)"

  modules-vet:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-go: 'true'
      - name: Run code vetter
        working-directory: ./modules
        run: go vet github.com/kubetail-org/kubetail/modules/...

  modules-test:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-go: 'true'
      - name: Run tests
        working-directory: ./modules
        run: go test -race github.com/kubetail-org/kubetail/modules/...

  dashboard-ui-lint:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-node: 'true'
      - name: Install dependencies
        working-directory: ./dashboard-ui
        run: pnpm install --frozen-lockfile
      - name: Lint
        working-directory: ./dashboard-ui
        run: pnpm lint

  dashboard-ui-test:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-node: 'true'
      - name: Install dependencies
        working-directory: ./dashboard-ui
        run: pnpm install --frozen-lockfile
      - name: Test
        working-directory: ./dashboard-ui
        run: pnpm test run

  dashboard-ui-build:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-node: 'true'
      - name: Install dependencies
        working-directory: ./dashboard-ui
        run: pnpm install --frozen-lockfile
      - name: Build
        working-directory: ./dashboard-ui
        run: pnpm build

  docker-builds:
    needs: [
      crates-build, crates-lint, crates-vet, crates-test,
      modules-lint, modules-vet, modules-test,
      dashboard-ui-lint, dashboard-ui-test, dashboard-ui-build
    ]
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 20
    strategy:
      matrix:
        include:
          # AMD64 builds on standard Ubuntu
          - image: dashboard
            dockerfile: build/package/Dockerfile.dashboard
            runner: ubuntu-24.04
            tag-suffix: latest
            cache-scope: dashboard-amd64
          - image: cluster-api
            dockerfile: build/package/Dockerfile.cluster-api
            runner: ubuntu-24.04
            tag-suffix: latest
            cache-scope: cluster-api-amd64
          - image: cluster-agent
            dockerfile: build/package/Dockerfile.cluster-agent
            runner: ubuntu-24.04
            tag-suffix: latest
            cache-scope: cluster-agent-amd64
          # ARM64 builds on ARM Ubuntu
          - image: dashboard
            dockerfile: build/package/Dockerfile.dashboard
            runner: ubuntu-24.04-arm
            tag-suffix: arm64
            cache-scope: dashboard-arm64
          - image: cluster-api
            dockerfile: build/package/Dockerfile.cluster-api
            runner: ubuntu-24.04-arm
            tag-suffix: arm64
            cache-scope: cluster-api-arm64
          - image: cluster-agent
            dockerfile: build/package/Dockerfile.cluster-agent
            runner: ubuntu-24.04-arm
            tag-suffix: arm64
            cache-scope: cluster-agent-arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build ${{ matrix.image }} for native architecture
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: false
          tags: kubetail-${{ matrix.image }}:${{ matrix.tag-suffix }}
          cache-from: type=gha,scope=${{ matrix.cache-scope }}
          cache-to: type=gha,mode=max,scope=${{ matrix.cache-scope }}

  cli-builds:
    needs: [
      crates-build, crates-lint, crates-vet, crates-test,
      modules-lint, modules-vet, modules-test,
      dashboard-ui-lint, dashboard-ui-test, dashboard-ui-build
    ]
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            platform: linux-amd64
          - os: ubuntu-24.04-arm
            platform: linux-arm64
          - os: macos-15
            platform: macos-arm64
          - os: macos-14
            platform: macos-arm64
          - os: macos-13
            platform: macos-amd64
          - os: windows-latest
            platform: windows-amd64
          - os: windows-11-arm
            platform: windows-arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-node: 'true'
          setup-go: 'true'
      - name: Build CLI for ${{ matrix.platform }}
        run: make build
        env:
          PLATFORM: ${{ matrix.platform }}