name: release-cli

permissions:
  contents: write

on:
  push:
    tags:
      - "cli/v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release"
        required: true
        type: string
      signing_policy:
        description: "SignPath slug"
        required: true
        type: choice
        default: test-signing
        options:
          - test-signing
          - release-signing
      dry_run:
        description: "Dry run"
        required: false
        type: boolean
        default: true

jobs:
  config:
    name: Configure workflow
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.config.outputs.version }}
      signing_policy: ${{ steps.config.outputs.signing_policy }}
      dry_run: ${{ steps.config.outputs.dry_run }}
    steps:
      - id: config
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "signing_policy=${{ github.event.inputs.signing_policy }}" >> $GITHUB_OUTPUT
            echo "dry_run=${{ github.event.inputs.dry_run }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/cli/v}" >> $GITHUB_OUTPUT
            echo "signing_policy=release-signing" >> $GITHUB_OUTPUT
            echo "dry_run=false" >> $GITHUB_OUTPUT
          fi

  prepare:
    name: Prepare source
    needs: config
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5
        with:
          ref: refs/tags/cli/v${{ needs.config.outputs.version }}
      - uses: ./.github/actions/setup-environment
        with:
          setup-node: "true"
          setup-go: "true"
      - name: Build frontend
        working-directory: dashboard-ui
        run: |
          pnpm install
          pnpm build
      - name: Vendor backend
        env:
          GOWORK: off
        run: |
          rm -rf modules/dashboard/website
          mv dashboard-ui/dist modules/dashboard/website
          cd modules/cli
          go mod vendor
      - name: Clean up source directory
        run: |
          rm -rf .git
          rm -rf dashboard-ui/node_modules
      - name: Upload artifact
        uses: actions/upload-artifact@v5
        with:
          name: source
          path: .
          include-hidden-files: true

  build:
    name: Build binaries
    needs: [config, prepare]
    strategy:
      matrix:
        runner:
          - ubuntu-24.04
          - ubuntu-24.04-arm
          - macos-latest
          - macos-13
          - windows-latest
          - windows-11-arm
        include:
          - runner: ubuntu-24.04
            GOOS: linux
            GOARCH: amd64
          - runner: ubuntu-24.04-arm
            GOOS: linux
            GOARCH: arm64
          - runner: macos-latest
            GOOS: darwin
            GOARCH: arm64
          - runner: macos-13
            GOOS: darwin
            GOARCH: amd64
          - runner: windows-latest
            GOOS: windows
            GOARCH: amd64
          - runner: windows-11-arm
            GOOS: windows
            GOARCH: arm64
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v5
        with:
          ref: refs/tags/cli/v${{ needs.config.outputs.version }}
          sparse-checkout: .github/actions/setup-environment
          sparse-checkout-cone-mode: false
          path: repo
      - uses: ./repo/.github/actions/setup-environment
        with:
          setup-go: "true"
      - name: Download source
        uses: actions/download-artifact@v6
        with:
          name: source
          path: kubetail-cli
      - name: Build binary
        working-directory: kubetail-cli/modules/cli
        env:
          GOWORK: off
          CGO_ENABLED: 0
          GOOS: ${{ matrix.GOOS }}
          GOARCH: ${{ matrix.GOARCH }}
          LDFLAGS: "-s -w -X 'github.com/kubetail-org/kubetail/modules/cli/cmd.version=${{ needs.config.outputs.version }}'"
        shell: bash
        run: |
          go build -mod=vendor -ldflags="${LDFLAGS}" -o ../../bin/kubetail .
      - name: Append os/arch to binary file name
        working-directory: kubetail-cli
        run: mv bin/kubetail bin/kubetail-${{ matrix.GOOS }}-${{ matrix.GOARCH }}
      - name: Upload artifact
        uses: actions/upload-artifact@v5
        with:
          path: kubetail-cli/bin/*
          name: assets-${{ matrix.GOOS }}-${{ matrix.GOARCH }}

  sign-darwin:
    name: Sign darwin binaries
    needs: [config, build]
    if: false
    runs-on: macos-latest
    strategy:
      matrix:
        arch:
          - amd64
          - arm64
    steps:
      - name: Install SignPath MacOSCryptoTokenKit
        run: |
          curl -o SignPathCryptoTokenKit.dmg https://download.signpath.io/cryptoproviders/macos-cryptotokenkit/2-latest/SignPathCryptoTokenKit.dmg
          codesign -dv --verbose SignPathCryptoTokenKit.dmg
          hdiutil attach ./SignPathCryptoTokenKit.dmg -mountroot ./tools
      - name: Download artifact
        uses: actions/download-artifact@v6
        with:
          name: assets-darwin-${{ matrix.arch }}
          path: assets
      - name: Sign binary
        env:
          BIN_NAME: kubetail-darwin-${{ matrix.arch }}
        run: |
          mkdir assets
          echo "hello" > assets/${BIN_NAME}

          open "./tools/SignPathCryptoTokenKit/SignPathCryptoTokenKit.app" --args \
            --api-token ${{ secrets.SIGNPATH_API_TOKEN }} \
            --organization-id ${{ secrets.SIGNPATH_ORGANIZATION_ID }} \
            --project-slug kubetail \
            --signing-policy-slug ${{ needs.config.outputs.signing_policy }}

          sleep 20

          # choose cert hash
          if [ "${{ needs.config.outputs.signing_policy }}" == "release-signing" ]; then
            CERT_HASH="TODO"
          else
            CERT_HASH="TODO"
          fi

          # sign
          codesign -f --timestamp --options=runtime \
            -s "$CERT_HASH" \
            ./assets/${BIN_NAME}

          # check signature
          codesign -dv --verbose ./assets/${BIN_NAME}
      - name: Upload signed artifact
        uses: actions/upload-artifact@v5
        with:
          path: assets
          name: assets-darwin-${{ matrix.arch }}
          overwrite: true

  sign-windows:
    name: Create windows zip and sign binaries
    needs: [config, build]
    runs-on: windows-latest
    strategy:
      matrix:
        arch:
          - amd64
          - arm64
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v6
        with:
          name: assets-windows-${{ matrix.arch }}
          path: assets
      - name: Create zip archive
        working-directory: ./assets
        shell: pwsh
        run: |
          $file = "kubetail-windows-${{ matrix.arch }}"
          Copy-Item -Path $file -Destination kubetail.exe
          Compress-Archive -Path kubetail.exe -DestinationPath "${file}.zip"
          Remove-Item kubetail.exe
      - id: upload-artifact
        name: Upload artifacts
        uses: actions/upload-artifact@v5
        with:
          path: assets
          name: assets-windows-${{ matrix.arch }}
          overwrite: true
      - name: Sign Windows Binaries
        uses: signpath/github-action-submit-signing-request@v1.1
        with:
          api-token: "${{ secrets.SIGNPATH_API_TOKEN }}"
          organization-id: "${{ secrets.SIGNPATH_ORGANIZATION_ID }}"
          project-slug: "kubetail"
          signing-policy-slug: "${{ needs.config.outputs.signing_policy }}"
          github-artifact-id: "${{ steps.upload-artifact.outputs.artifact-id }}"
          wait-for-completion: true
          output-artifact-directory: assets
          parameters: |
            os: ${{ toJSON('windows') }}
            arch: ${{ toJSON(matrix.arch) }}
            version: ${{ toJSON(needs.config.outputs.version) }}
      - name: Upload signed artifacts
        uses: actions/upload-artifact@v5
        with:
          path: assets
          name: assets-windows-${{ matrix.arch }}
          overwrite: true

  package-tarball:
    name: Create gzipped tarballs
    needs: [config, sign-windows]
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        os:
          - darwin
          - linux
          - windows
        arch:
          - amd64
          - arm64
    steps:
      - uses: actions/checkout@v5
        with:
          ref: refs/tags/cli/v${{ needs.config.outputs.version }}
          sparse-checkout: |
            LICENSE
          sparse-checkout-cone-mode: false
          path: repo
      - name: Download artifacts
        uses: actions/download-artifact@v6
        with:
          name: assets-${{ matrix.os }}-${{ matrix.arch }}
          path: assets
      - name: Create gzipped tarball
        env:
          REPO_DIR: repo
          ASSETS_DIR: assets
          OUTPUT_DIR: out
          BIN_NAME: kubetail-${{ matrix.os }}-${{ matrix.arch }}
        run: |
          mkdir -p "${OUTPUT_DIR}"
          TEMP_DIR="$(mktemp -d)"

          TARGET_NAME="kubetail"
          if [ "${{ matrix.os }}" = "windows" ]; then
            TARGET_NAME="kubetail.exe"
          fi

          chmod +x "${ASSETS_DIR}/${BIN_NAME}"
          mv "${ASSETS_DIR}/${BIN_NAME}" "${TEMP_DIR}/${TARGET_NAME}"
          cp "${REPO_DIR}/LICENSE" "${TEMP_DIR}/LICENSE"
          tar -C "${TEMP_DIR}" -czf "${OUTPUT_DIR}/${BIN_NAME}.tar.gz" "${TARGET_NAME}" LICENSE
          rm -rf "${TEMP_DIR}"
      - name: Upload artifacts
        uses: actions/upload-artifact@v5
        with:
          name: assets-${{ matrix.os }}-${{ matrix.arch }}-tgz
          path: out

  release:
    name: Create GitHub release
    needs: [config, package-tarball]
    runs-on: ubuntu-24.04
    steps:
      - name: Download binaries
        uses: actions/download-artifact@v6
        with:
          pattern: assets-*
          path: assets
          merge-multiple: true
      - name: Download source
        uses: actions/download-artifact@v6
        with:
          name: source
          path: kubetail-cli
      - name: Create source tarball
        run: |
          tar -cJf assets/kubetail-cli.orig.tar.xz kubetail-cli
      - name: Generate SHA-256 checksums
        working-directory: ./assets
        run: |
          sha256sum * > SHA256SUMS
      - name: Create release
        uses: softprops/action-gh-release@v2.3.2
        if: ${{ needs.config.outputs.dry_run != 'true' }}
        with:
          files: assets/*
          draft: true
      - name: Debug
        if: ${{ needs.config.outputs.dry_run == 'true' }}
        run: |
          ls -lah assets/*
          cat assets/SHA256SUMS
