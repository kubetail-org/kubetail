name: release-cli

permissions:
  contents: write

on:
  push:
    tags:
      - 'cli/v*'

jobs:
  build:
    name: Build binaries
    strategy:
      matrix:
        os:
          - ubuntu-24.04
          - ubuntu-24.04-arm
          - macos-latest
          - macos-13
          - windows-latest
          - windows-11-arm
        include:
          - os: ubuntu-24.04
            GOOS: linux
            GOARCH: amd64
          - os: ubuntu-24.04-arm
            GOOS: linux
            GOARCH: arm64
          - os: macos-latest
            GOOS: darwin
            GOARCH: arm64
          - os: macos-13
            GOOS: darwin
            GOARCH: amd64
          - os: windows-latest
            GOOS: windows
            GOARCH: amd64
          - os: windows-11-arm
            GOOS: windows
            GOARCH: arm64
    runs-on: ${{ matrix.os }}
    outputs:
      artifacts: ${{ steps.upload.outputs.artifact-names }}
    steps:
      - name: Get tag name
        uses: olegtarasov/get-tag@v2.1.4
        id: tagName
        with:
          tagRegex: 'cli/v(.*)'
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: pnpm/action-setup@v4
        with:
          version: 10
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          cache: false
      - name: Run build script
        run: make build VERSION=${{ steps.tagName.outputs.tag }}
      - name: Append os/arch to binary file name
        run: mv bin/kubetail bin/kubetail-${{ matrix.GOOS }}-${{ matrix.GOARCH }}
      - name: Create zip archive
        if: matrix.GOOS == 'windows'
        working-directory: ./bin
        shell: pwsh
        run: |
          $file = "kubetail-${{ matrix.GOOS }}-${{ matrix.GOARCH }}"
          Copy-Item -Path $file -Destination kubetail.exe
          Compress-Archive -Path kubetail.exe -DestinationPath "${file}.zip"
          Remove-Item kubetail.exe
      - id: upload-artifact
        name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.GOOS }}-${{ matrix.GOARCH }}
          path: bin/*
      - name: Sign Windows Binaries
        if: matrix.GOOS == 'windows'
        uses: signpath/github-action-submit-signing-request@v1.1
        with:
          api-token: '${{ secrets.SIGNPATH_API_TOKEN }}'
          organization-id: '${{ secrets.SIGNPATH_ORGANIZATION_ID }}'
          project-slug: 'kubetail'
          signing-policy-slug: 'release-signing'
          github-artifact-id: '${{ steps.upload-artifact.outputs.artifact-id }}'
          wait-for-completion: true
          output-artifact-directory: 'bin'
          parameters: |
            os: ${{ toJSON(matrix.GOOS) }}
            arch: ${{ toJSON(matrix.GOARCH) }}
            version: ${{ toJSON(steps.tagName.outputs.tag) }}
      - id: upload-signed-artifact
        if: matrix.GOOS == 'windows'
        name: Upload signed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.GOOS }}-${{ matrix.GOARCH }}
          path: bin/*
          overwrite: true

  package-deb:
    name: Build deb package
    needs: build
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
    runs-on: ubuntu-24.04
    steps:
      - name: Get tag name
        uses: olegtarasov/get-tag@v2.1.4
        id: tagName
        with:
          tagRegex: 'cli/v(.*)'
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: bin
          pattern: artifacts-${{ matrix.os }}-${{ matrix.arch }}
          merge-multiple: true
      - name: Create dir structure for .deb package
        run: |
          mkdir -p .debpkg/usr/bin
          # when we download from deb, the binary should be named kubetail
          cp -p 'bin/kubetail-${{ matrix.os }}-${{ matrix.arch }}' .debpkg/usr/bin/kubetail
      - id: build_deb
        name: Create a .deb package
        uses: jiro4989/build-deb-action@v4.2.1
        with:
          package: kubetail
          package_root: .debpkg
          maintainer: Andres Morey
          version: ${{ steps.tagName.outputs.tag }}
          arch: ${{ matrix.arch }}
          desc: 'Real-time logging dashboard for Kubernetes'
      - name: Upload .deb artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.arch }}-deb
          path: ${{ steps.build_deb.outputs.file_name }}

  package-rpm:
    name: Build rpm package
    needs: build
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            pkgArch: x86_64
          - os: linux
            arch: arm64
            pkgArch: aarch64
    runs-on: ubuntu-24.04
    steps:
      - name: Get tag name
        uses: olegtarasov/get-tag@2.1.3
        id: tagName
        with:
          tagRegex: 'cli/v(.*)'
      - uses: actions/checkout@v4
      - name: Install the rpm and rpm build
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm build-essential
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: bin
          pattern: artifacts-${{ matrix.os }}-${{ matrix.arch }}
          merge-multiple: true
      - name: Rename the build binary to kubetail
        run: |
          mv 'bin/kubetail-${{ matrix.os }}-${{ matrix.arch }}' bin/kubetail
      - name: Copy spec file to SPEC dir
        run: |
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          cp .github/ci-config/kubetail-rpm.spec ~/rpmbuild/SPECS/kubetail.spec
      - name: Extract the release and version for rpm
        id: rpmBuildInfo
        run: |
          CLI_VER='${{ steps.tagName.outputs.tag }}'
          if [[ "$CLI_VER" == *"-"* ]]; then
            # Handle pre-release versions like "0.7.1-rc1"
            IFS='-' read -ra parts <<< "${CLI_VER}"
            VERSION="${parts[0]}" 
            RELEASE="0.${parts[1]}.1"
          else
            # Handle stable versions like "0.7.1" - always set release to "1"
            VERSION="${CLI_VER}"
            RELEASE="1"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release=$RELEASE" >> $GITHUB_OUTPUT

      - name: Create tarball for the binary
        run: |
          CLI_VER='${{steps.rpmBuildInfo.outputs.version}}' 
          mkdir -p ~/rpmbuild/SOURCES/kubetail-${CLI_VER}
          mv bin/kubetail ~/rpmbuild/SOURCES/kubetail-${CLI_VER}
          cd ~/rpmbuild/SOURCES
          tar czf "kubetail-${CLI_VER}.tar.gz" "kubetail-${CLI_VER}/"
      - name: Build RPM package
        run: |
          VERSION='${{ steps.rpmBuildInfo.outputs.version }}' 
          RELEASE='${{ steps.rpmBuildInfo.outputs.release }}'
          ARCH='${{ matrix.pkgArch }}'
          rpmbuild -ba --target "${ARCH}" ~/rpmbuild/SPECS/kubetail.spec --define "version ${VERSION}" --define "release ${RELEASE}"
      - name: Rename file
        run: |
          VERSION='${{ steps.rpmBuildInfo.outputs.version }}' 
          RELEASE='${{ steps.rpmBuildInfo.outputs.release }}'

          mkdir -p rpm-output
          FILE_NAME="kubetail-$VERSION-$RELEASE.${{ matrix.pkgArch }}.rpm"
          FILE_NEW_NAME="kubetail-$VERSION-$RELEASE.${{ matrix.arch }}.rpm" # renaming arch to arm64 and amd64

          mv ~/rpmbuild/RPMS/'${{ matrix.pkgArch }}'/"${FILE_NAME}" ./rpm-output/"${FILE_NEW_NAME}"
      - name: Upload rpm artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.arch }}-rpm
          path: rpm-output/*

  release:
    name: Create GitHub release
    needs: [build, package-deb, package-rpm]
    runs-on: ubuntu-24.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: bin
          pattern: artifacts-*
          merge-multiple: true
      - name: Generate SHA-256 checksums
        shell: bash
        run: |
          shopt -s nullglob
          for file in bin/*; do
            if [ -f "$file" ]; then
              sha256sum "$file" | cut -d " " -f 1 > "${file}.sha256"
            fi
          done
      - name: Create release
        uses: softprops/action-gh-release@v2.3.2
        with:
          files: bin/*
          draft: true
