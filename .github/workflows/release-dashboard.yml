name: release-dashboard

on:
  push:
    tags:
      - 'dashboard/v*'

jobs:
  build-and-publish-amd64:
    runs-on: ubuntu-latest
    steps:
      - name: Get tag name
        uses: olegtarasov/get-tag@2.1.3
        id: tagName
        with:
          tagRegex: "dashboard/v(.*)"
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: build/package/Dockerfile.dashboard
          push: true
          tags: kubetail/kubetail-dashboard:${{ steps.tagName.outputs.tag }}-amd64

  build-and-publish-arm64:
    runs-on: arm64-ubuntu-22
    steps:
      - name: Get tag name
        uses: olegtarasov/get-tag@2.1.3
        id: tagName
        with:
          tagRegex: "dashboard/v(.*)"
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: build/package/Dockerfile.dashboard
          push: true
          tags: kubetail/kubetail-dashboard:${{ steps.tagName.outputs.tag }}-arm64
        
  create-and-publish-manifest:
    runs-on: ubuntu-latest
    needs: [build-and-publish-amd64, build-and-publish-arm64]
    steps:
      - name: Get tag name
        uses: olegtarasov/get-tag@2.1.3
        id: tagName
        with:
          tagRegex: "dashboard/v(.*)"
      - name: 'Setup jq'
        uses: dcarbone/install-jq-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create and push manifest
        run: |
          docker buildx imagetools create -t kubetail/kubetail-dashboard:${{ steps.tagName.outputs.tag }} \
            kubetail/kubetail-dashboard:${{ steps.tagName.outputs.tag }}-amd64 \
            kubetail/kubetail-dashboard:${{ steps.tagName.outputs.tag }}-arm64
      - name: Fetch docker token
        run: |
          TOKEN=$(curl -X POST "https://hub.docker.com/v2/users/login" -H "Content-Type: application/json" -d '{"username": "${{ secrets.DOCKERHUB_USERNAME }}", "password": "${{ secrets.DOCKERHUB_TOKEN }}"}' | jq -r '.token')
          echo "TOKEN=$TOKEN" >> $GITHUB_ENV
      - name: Delete extra arch manifests
        run: |
          declare -a archs=("amd64" "arm64")
          for arch in "${archs[@]}"
          do
            RESPONSE=$(curl -s -w "%{http_code}" \
              -X DELETE \
              -H "Authorization: Bearer $TOKEN" \
              "https://hub.docker.com/v2/repositories/kubetail/kubetail-dashboard/tags/${{ steps.tagName.outputs.tag }}-$arch")
            if [ "$RESPONSE" -ne 204 ]; then
              echo "DELETE for $arch failed with status $RESPONSE"
              exit 1
            fi
          done
