# Copyright 2024-2025 Andres Morey
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Kubetail API GraphQL schema

# --- directives ---

directive @validate(rule: String!, message: String) on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION
directive @nullIfValidationFailed on FIELD_DEFINITION

# --- Log Metadata ---

type LogMetadata {
  id: ID!
  spec: LogMetadataSpec!
  fileInfo: LogMetadataFileInfo!
}

type LogMetadataFileInfo {
  size: Int64!
  lastModifiedAt: TimestampPBTimestamp
}

type LogMetadataList {
  items: [LogMetadata!]!
}

type LogMetadataSpec {
  nodeName: String!
  namespace: String!
  podName: String!
  containerName: String!
  containerID: ID!
}

type LogMetadataWatchEvent {
  type: String!
  object: LogMetadata
}

# --- Log Records ---

type LogRecord {
  timestamp: Time!
  message: String!
  source: LogSource!
}

# --- Log Records Query ---

enum LogRecordsQueryMode {
  HEAD
  TAIL
}

type LogRecordsQueryResponse {
  records: [LogRecord!]!
  nextCursor: ID
}

# --- Log Source ---

type LogSource {
  metadata: LogSourceMetadata!
  namespace: String!
  podName: String!
  containerName: String!
  containerID: String!
}

input LogSourceFilter {
  region: [String!]
  zone: [String!]
  os: [String!]
  arch: [String!]
  node: [String!]
  container: [String!]
}

type LogSourceMetadata {
  region: String!
  zone: String!
  os: String!
  arch: String!
  node: String!
}

type LogSourceWatchEvent {
  type: WatchEventType!
  object: LogSource
}

# --- PageInfo ---

type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: ID

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: ID
}

# --- PodLogQueryResponse ---

type PodLogQueryResponse {
  results: [LogRecord!]!
  pageInfo: PageInfo!
}

# https://pkg.go.dev/k8s.io/apimachinery/pkg/watch#EventType
enum WatchEventType {
  ADDED
  MODIFIED
  DELETED
  BOOKMARK
  ERROR
}

# --- root operations ---

type Query {
  """
  LogMetadata API
  """
  logMetadataList(namespace: String): LogMetadataList

  """
  LogRecords API
  """
  logRecordsFetch(
    kubeContext: String
    sources: [String!]!
    mode: LogRecordsQueryMode = TAIL
    since: String
    until: String
    after: String
    before: String
    grep: String
    sourceFilter: LogSourceFilter
    limit: Int = 100 @validate(rule: "gt=0", message: "Value must be > 0")
  ): LogRecordsQueryResponse @nullIfValidationFailed
}

type Subscription {
  """
  LogMetadata API
  """
  logMetadataWatch(namespace: String): LogMetadataWatchEvent

  """
  LogRecords API
  """
  logRecordsFollow(
    kubeContext: String
    sources: [String!]!
    since: String
    after: String
    grep: String
    sourceFilter: LogSourceFilter
  ): LogRecord @nullIfValidationFailed

  """
  LogSources API
  """
  logSourcesWatch(kubeContext: String, sources: [String!]!): LogSourceWatchEvent
}

# --- helpers ---

"""
A 64-bit integer.
"""
scalar Int64

"""
An ISO-8601 encoded UTC date string.
"""
scalar TimestampPBTimestamp

"""
An ISO-8601 encoded UTC date string.
"""
scalar Time
