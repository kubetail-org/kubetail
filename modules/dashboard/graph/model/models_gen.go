// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"k8s.io/apimachinery/pkg/watch"
)

type HealthCheckResponse struct {
	Status    HealthCheckStatus `json:"status"`
	Message   *string           `json:"message,omitempty"`
	Timestamp time.Time         `json:"timestamp"`
}

type KubeConfigWatchEvent struct {
	Type   watch.EventType `json:"type"`
	Object *KubeConfig     `json:"object,omitempty"`
}

type LogRecord struct {
	Timestamp time.Time `json:"timestamp"`
	Message   string    `json:"message"`
}

type Mutation struct {
}

type PageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor,omitempty"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
	// When paginating backwards, the cursor to continue.
	StartCursor *string `json:"startCursor,omitempty"`
}

type PodLogQueryResponse struct {
	Results  []*LogRecord `json:"results"`
	PageInfo *PageInfo    `json:"pageInfo"`
}

type Query struct {
}

type Subscription struct {
}

type HealthCheckStatus string

const (
	HealthCheckStatusSuccess  HealthCheckStatus = "SUCCESS"
	HealthCheckStatusFailure  HealthCheckStatus = "FAILURE"
	HealthCheckStatusUnknown  HealthCheckStatus = "UNKNOWN"
	HealthCheckStatusNotfound HealthCheckStatus = "NOTFOUND"
)

var AllHealthCheckStatus = []HealthCheckStatus{
	HealthCheckStatusSuccess,
	HealthCheckStatusFailure,
	HealthCheckStatusUnknown,
	HealthCheckStatusNotfound,
}

func (e HealthCheckStatus) IsValid() bool {
	switch e {
	case HealthCheckStatusSuccess, HealthCheckStatusFailure, HealthCheckStatusUnknown, HealthCheckStatusNotfound:
		return true
	}
	return false
}

func (e HealthCheckStatus) String() string {
	return string(e)
}

func (e *HealthCheckStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HealthCheckStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HealthCheckStatus", str)
	}
	return nil
}

func (e HealthCheckStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
