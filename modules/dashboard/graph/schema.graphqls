# Copyright 2024-2025 Andres Morey
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Kubetail Dashboard GraphQL schema

# --- directives ---

directive @validate(rule: String!, message: String) on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION
directive @nullIfValidationFailed on FIELD_DEFINITION

# --- interfaces ---

interface List {
  kind: String!
  apiVersion: String!
  metadata: MetaV1ListMeta!
  items: [Object!]!
}

interface Object {
  id: ID!
  kind: String!
  apiVersion: String!
  metadata: MetaV1ObjectMeta!
}

# --- AppsV1 ---

# https://pkg.go.dev/k8s.io/api/apps/v1#DaemonSet
type AppsV1DaemonSet implements Object {
  id: ID!
  kind: String!
  apiVersion: String!
  metadata: MetaV1ObjectMeta!
  spec: AppsV1DaemonSetSpec!
  status: AppsV1DaemonSetStatus!
}

# https://pkg.go.dev/k8s.io/api/apps/v1#DaemonSetCondition
type AppsV1DaemonSetCondition {
  type: AppsV1DaemonSetConditionType!
  status: CoreV1ConditionStatus!
  lastTransitionTime: MetaV1Time!
  reason: String!
  message: String!
}

# https://pkg.go.dev/k8s.io/api/apps/v1#DaemonSetConditionType
scalar AppsV1DaemonSetConditionType

# https://pkg.go.dev/k8s.io/api/apps/v1#DaemonSetList
type AppsV1DaemonSetList implements List {
  kind: String!
  apiVersion: String!
  metadata: MetaV1ListMeta!
  items: [AppsV1DaemonSet!]!
}

# https://pkg.go.dev/k8s.io/api/apps/v1#DaemonSetSpec
type AppsV1DaemonSetSpec {
  selector: MetaV1LabelSelector
}

# https://pkg.go.dev/k8s.io/api/apps/v1#DaemonSetStatus
type AppsV1DaemonSetStatus {
  currentNumberScheduled: Int!
  numberMisscheduled: Int!
  desiredNumberScheduled: Int!
  numberReady: Int!
  observedGeneration: Int64!
  updatedNumberScheduled: Int!
  numberAvailable: Int!
  numberUnavailable: Int!
  conditions: [AppsV1DaemonSetCondition!]!
}

# https://pkg.go.dev/k8s.io/apimachinery/pkg/watch#Event
type AppsV1DaemonSetsWatchEvent {
  type: WatchEventType!
  object: AppsV1DaemonSet
}

# https://pkg.go.dev/k8s.io/api/apps/v1#Deployment
type AppsV1Deployment implements Object {
  id: ID!
  kind: String!
  apiVersion: String!
  metadata: MetaV1ObjectMeta!
  spec: AppsV1DeploymentSpec!
  status: AppsV1DeploymentStatus!
}

# https://pkg.go.dev/k8s.io/api/apps/v1#DeploymentList
type AppsV1DeploymentList implements List {
  kind: String!
  apiVersion: String!
  metadata: MetaV1ListMeta!
  items: [AppsV1Deployment!]!
}

# https://pkg.go.dev/k8s.io/api/apps/v1#DeploymentStatus
type AppsV1DeploymentStatus {
  replicas: Int!
}

# https://pkg.go.dev/k8s.io/api/apps/v1#DeploymentSpec
type AppsV1DeploymentSpec {
  replicas: Int
  selector: MetaV1LabelSelector
  paused: Boolean!
}

# https://pkg.go.dev/k8s.io/apimachinery/pkg/watch#Event
type AppsV1DeploymentsWatchEvent {
  type: WatchEventType!
  object: AppsV1Deployment
}

# https://pkg.go.dev/k8s.io/api/apps/v1#ReplicaSet
type AppsV1ReplicaSet implements Object {
  id: ID!
  kind: String!
  apiVersion: String!
  metadata: MetaV1ObjectMeta!
  spec: AppsV1ReplicaSetSpec!
  status: AppsV1ReplicaSetStatus!
}

# https://pkg.go.dev/k8s.io/api/apps/v1#ReplicaSetList
type AppsV1ReplicaSetList implements List {
  kind: String!
  apiVersion: String!
  metadata: MetaV1ListMeta!
  items: [AppsV1ReplicaSet!]!
}

# https://pkg.go.dev/k8s.io/api/apps/v1#ReplicaSetSpec
type AppsV1ReplicaSetSpec {
  replicas: Int
  selector: MetaV1LabelSelector
}

# https://pkg.go.dev/k8s.io/api/apps/v1#ReplicaSetStatus
type AppsV1ReplicaSetStatus {
  replicas: Int!
}

# https://pkg.go.dev/k8s.io/apimachinery/pkg/watch#Event
type AppsV1ReplicaSetsWatchEvent {
  type: WatchEventType!
  object: AppsV1ReplicaSet
}

# https://pkg.go.dev/k8s.io/api/apps/v1#StatefulSet
type AppsV1StatefulSet implements Object {
  id: ID!
  kind: String!
  apiVersion: String!
  metadata: MetaV1ObjectMeta!
  spec: AppsV1StatefulSetSpec!
}

# https://pkg.go.dev/k8s.io/api/apps/v1#StatefulSetList
type AppsV1StatefulSetList implements List {
  kind: String!
  apiVersion: String!
  metadata: MetaV1ListMeta!
  items: [AppsV1StatefulSet!]!
}

# https://pkg.go.dev/k8s.io/api/apps/v1#StatefulSetSpec
type AppsV1StatefulSetSpec {
  replicas: Int
  selector: MetaV1LabelSelector
}

# https://pkg.go.dev/k8s.io/apimachinery/pkg/watch#Event
type AppsV1StatefulSetsWatchEvent {
  type: WatchEventType!
  object: AppsV1StatefulSet
}

# --- BatchV1 ---

# https://pkg.go.dev/k8s.io/api/batch/v1#CronJob
type BatchV1CronJob implements Object {
  id: ID!
  kind: String!
  apiVersion: String!
  metadata: MetaV1ObjectMeta!
  spec: BatchV1CronJobSpec!
  status: BatchV1CronJobStatus!
}

# https://pkg.go.dev/k8s.io/api/batch/v1#CronJobList
type BatchV1CronJobList implements List {
  kind: String!
  apiVersion: String!
  metadata: MetaV1ListMeta!
  items: [BatchV1CronJob!]!
}

# https://pkg.go.dev/k8s.io/api/batch/v1#CronJobSpec
type BatchV1CronJobSpec {
  schedule: String!
  timeZone: String
  suspend: Boolean
  jobTemplate: BatchV1JobTemplateSpec!
  successfulJobsHistoryLimit: Int
  failedJobsHistoryLimit: Int
}

# https://pkg.go.dev/k8s.io/api/batch/v1#CronJob
type BatchV1CronJobStatus {
  active: [CoreV1ObjectReference!]!
  lastScheduleTime: MetaV1Time
  lastSuccessfulTime: MetaV1Time
}

# https://pkg.go.dev/k8s.io/apimachinery/pkg/watch#Event
type BatchV1CronJobsWatchEvent {
  type: WatchEventType!
  object: BatchV1CronJob
}

# https://pkg.go.dev/k8s.io/api/batch/v1#Job
type BatchV1Job implements Object {
  id: ID!
  kind: String!
  apiVersion: String!
  metadata: MetaV1ObjectMeta!
  spec: BatchV1JobSpec!
  status: BatchV1JobStatus!
}

# https://pkg.go.dev/k8s.io/api/batch/v1#JobCondition
type BatchV1JobCondition {
  type: BatchV1JobConditionType!
  status: CoreV1ConditionStatus!
  lastProbeTime: MetaV1Time!
  lastTransitionTime: MetaV1Time!
  reason: String!
  message: String!
}

# https://pkg.go.dev/k8s.io/api/batch/v1#JobConditionType
enum BatchV1JobConditionType {
  Suspended
  Complete
  Failed
  FailureTarget
}

# https://pkg.go.dev/k8s.io/api/batch/v1#JobList
type BatchV1JobList implements List {
  kind: String!
  apiVersion: String!
  metadata: MetaV1ListMeta!
  items: [BatchV1Job!]!
}

# https://pkg.go.dev/k8s.io/api/batch/v1#JobSpec
type BatchV1JobSpec {
  parallelism: Int
  completions: Int
  backoffLimit: Int
  selector: MetaV1LabelSelector
  manualSelector: Boolean
  ttlSecondsAfterFinished: Int
  suspend: Boolean
}

# https://pkg.go.dev/k8s.io/api/batch/v1#JobStatus
type BatchV1JobStatus {
  conditions: [BatchV1JobCondition!]!
  startTime: MetaV1Time
  completionTime: MetaV1Time
  active: Int!
  succeeded: Int!
  failed: Int!
  completedIndexes: String!
  ready: Int
}

# https://pkg.go.dev/k8s.io/api/batch/v1#JobTemplateSpec
type BatchV1JobTemplateSpec {
  metadata: MetaV1ObjectMeta!
  spec: BatchV1JobSpec!
}

# https://pkg.go.dev/k8s.io/apimachinery/pkg/watch#Event
type BatchV1JobsWatchEvent {
  type: WatchEventType!
  object: BatchV1Job
}

# --- CoreV1 ---

# https://pkg.go.dev/k8s.io/api@v0.28.1/core/v1#ConditionStatus
enum CoreV1ConditionStatus {
  True
  False
  Unknown
}

# https://pkg.go.dev/k8s.io/api/core/v1#Container
type CoreV1Container {
  name: String!
  image: String!
}

# https://pkg.go.dev/k8s.io/api/core/v1#ContainerState
type CoreV1ContainerState {
  waiting: CoreV1ContainerStateWaiting
  running: CoreV1ContainerStateRunning
  terminated: CoreV1ContainerStateTerminated
}

# https://pkg.go.dev/k8s.io/api/core/v1#ContainerStateWaiting
type CoreV1ContainerStateWaiting {
  reason: String!
  message: String!
}

# https://pkg.go.dev/k8s.io/api/core/v1#ContainerStateRunning
type CoreV1ContainerStateRunning {
  startedAt: MetaV1Time!
}

# https://pkg.go.dev/k8s.io/api/core/v1#ContainerStateTerminated
type CoreV1ContainerStateTerminated {
  exitCode: Int!
  signal: Int!
  reason: String!
  message: String!
  containerID: String!
}

# https://pkg.go.dev/k8s.io/api/core/v1#ContainerStatus
type CoreV1ContainerStatus {
  name: String!
  state: CoreV1ContainerState!
  lastTerminationState: CoreV1ContainerState!
  ready: Boolean!
  restartCount: Int!
  image: String!
  imageID: String!
  containerID: String!
  started: Boolean
}

# https://pkg.go.dev/k8s.io/api/core/v1#Namespace
type CoreV1Namespace implements Object {
  id: ID!
  kind: String!
  apiVersion: String!
  metadata: MetaV1ObjectMeta!
}

# https://pkg.go.dev/k8s.io/api/core/v1#NamespaceList
type CoreV1NamespaceList implements List {
  kind: String!
  apiVersion: String!
  metadata: MetaV1ListMeta!
  items: [CoreV1Namespace!]!
}

# https://pkg.go.dev/k8s.io/apimachinery/pkg/watch#Event
type CoreV1NamespacesWatchEvent {
  type: WatchEventType!
  object: CoreV1Namespace
}

# https://pkg.go.dev/k8s.io/api/core/v1#Node
type CoreV1Node implements Object {
  id: ID!
  kind: String!
  apiVersion: String!
  metadata: MetaV1ObjectMeta!
}

# https://pkg.go.dev/k8s.io/api/core/v1#NodeList
type CoreV1NodeList implements List {
  kind: String!
  apiVersion: String!
  metadata: MetaV1ListMeta!
  items: [CoreV1Node!]!
}

# https://pkg.go.dev/k8s.io/apimachinery/pkg/watch#Event
type CoreV1NodesWatchEvent {
  type: WatchEventType!
  object: CoreV1Node
}

# https://pkg.go.dev/k8s.io/api@v0.28.1/core/v1#ObjectReference
type CoreV1ObjectReference {
  kind: String!
  namespace: String!
  name: String!
  uid: ID!
  apiVersion: String!
  resourceVersion: String!
  fieldPath: String!
}

# https://pkg.go.dev/k8s.io/api/core/v1#Pod
type CoreV1Pod implements Object {
  id: ID!
  kind: String!
  apiVersion: String!
  metadata: MetaV1ObjectMeta!
  spec: CoreV1PodSpec!
  status: CoreV1PodStatus!
}

# https://pkg.go.dev/k8s.io/api/core/v1#PodLogOptions
input CoreV1PodLogOptions {
  container: String
  previous: Boolean
  sinceSeconds: Int64
  sinceTime: MetaV1Time
  tailLines: Int64
  limitBytes: Int64
}

# https://pkg.go.dev/k8s.io/api/core/v1#PodList
type CoreV1PodList implements List {
  kind: String!
  apiVersion: String!
  metadata: MetaV1ListMeta!
  items: [CoreV1Pod!]!
}

# https://pkg.go.dev/k8s.io/api/core/v1#PodPhase
enum CoreV1PodPhase {
  Pending
  Running
  Succeeded
  Failed
  Unknown
}

# https://pkg.go.dev/k8s.io/api/core/v1#PodStatus
type CoreV1PodStatus {
  phase: CoreV1PodPhase!
  message: String!
  reason: String!
  containerStatuses: [CoreV1ContainerStatus!]!
}

# https://pkg.go.dev/k8s.io/api/core/v1#PodSpec
type CoreV1PodSpec {
  containers: [CoreV1Container!]!
  nodeName: String!
  hostname: String!
  priorityClassName: String!
}

# https://pkg.go.dev/k8s.io/apimachinery/pkg/watch#Event
type CoreV1PodsWatchEvent {
  type: WatchEventType!
  object: CoreV1Pod
}

# https://pkg.go.dev/k8s.io/api/core/v1#Service
type CoreV1Service implements Object {
  id: ID!
  kind: String!
  apiVersion: String!
  metadata: MetaV1ObjectMeta!
  spec: CoreV1ServiceSpec!
}

# https://pkg.go.dev/k8s.io/api/core/v1#ServiceList
type CoreV1ServiceList implements List {
  kind: String!
  apiVersion: String!
  metadata: MetaV1ListMeta!
  items: [CoreV1Service!]!
}

# https://pkg.go.dev/k8s.io/api/core/v1#ServicePort
type CoreV1ServicePort {
  name: String
}

# https://pkg.go.dev/k8s.io/api/core/v1#ServiceSpec
type CoreV1ServiceSpec {
  ports: [CoreV1ServicePort!]!
  selector: StringMap
  clusterIP: String
  clusterIPs: [String!]
  externalName: String
}

# https://pkg.go.dev/k8s.io/apimachinery/pkg/watch#Event
type CoreV1ServicesWatchEvent {
  type: WatchEventType!
  object: CoreV1Service
}

# --- Health Check ---

type HealthCheckResponse {
  status: HealthCheckStatus!
  message: String
  timestamp: Time!
}

enum HealthCheckStatus {
  SUCCESS
  FAILURE
  UNKNOWN
  NOTFOUND
}

# --- Helm ---

type HelmChart {
  metadata: HelmChartMetadata
}

type HelmChartMetadata {
  name: String!
  version: String!
  condition: String!
  appVersion: String!
}

type HelmRelease {
  name: String!
  version: Int!
  namespace: String!
  chart: HelmChart
}

# --- KubeConfig ---

# https://pkg.go.dev/k8s.io/client-go/tools/clientcmd/api#Config
type KubeConfig {
  authInfos: [KubeConfigAuthInfo!]!
  clusters: [KubeConfigCluster!]!
  contexts: [KubeConfigContext!]!
  currentContext: String!
  extensions: KubeConfigExtensions
}

# https://pkg.go.dev/k8s.io/client-go/tools/clientcmd/api#AuthInfo
type KubeConfigAuthInfo {
  name: String!
  locationOfOrigin: String!
  extensions: KubeConfigExtensions
}

# https://pkg.go.dev/k8s.io/client-go/tools/clientcmd/api#Cluster
type KubeConfigCluster {
  name: String!
  locationOfOrigin: String!
  server: String!
  extensions: KubeConfigExtensions
}

# https://pkg.go.dev/k8s.io/client-go/tools/clientcmd/api#Context
type KubeConfigContext {
  name: String!
  locationOfOrigin: String!
  cluster: String!
  authInfo: String!
  namespace: String!
  extensions: KubeConfigExtensions
}

type KubeConfigWatchEvent {
  type: WatchEventType!
  object: KubeConfig
}

scalar KubeConfigExtensions

# --- Log Record ---

type LogRecord {
  timestamp: Time!
  message: String!
}

# --- MetaV1 ---

# https://pkg.go.dev/k8s.io/apimachinery/pkg/apis/meta/v1#GetOptions
input MetaV1GetOptions {
  resourceVersion: String
}

# https://pkg.go.dev/k8s.io/apimachinery/pkg/apis/meta/v1#LabelSelector
type MetaV1LabelSelector {
  matchLabels: StringMap
  matchExpressions: [MetaV1LabelSelectorRequirement!]!
}

# https://pkg.go.dev/k8s.io/apimachinery/pkg/apis/meta/v1#LabelSelectorRequirement
type MetaV1LabelSelectorRequirement {
  key: String!
  operator: MetaV1LabelSelectorOperator!
  values: [String!]!
}

# https://pkg.go.dev/k8s.io/apimachinery/pkg/apis/meta/v1#LabelSelectorOperator
enum MetaV1LabelSelectorOperator {
  In
  NotIn
  Exists
  DoesNotExist
}

# https://pkg.go.dev/k8s.io/apimachinery/pkg/apis/meta/v1#ListMeta
type MetaV1ListMeta {
  resourceVersion: String!
  continue: String!
  remainingItemCount: Int64
}

# https://pkg.go.dev/k8s.io/apimachinery/pkg/apis/meta/v1#ListOptions
input MetaV1ListOptions {
  labelSelector: String
  fieldSelector: String
  allowWatchBookmarks: Boolean
  resourceVersion: String
  resourceVersionMatch: MetaV1ResourceVersionMatch
  limit: Int64
  continue: String
  sendInitialEvents: Boolean
}

# https://pkg.go.dev/k8s.io/apimachinery/pkg/apis/meta/v1#ObjectMeta
type MetaV1ObjectMeta {
  uid: ID!
  name: String!
  namespace: String!
  resourceVersion: String!
  creationTimestamp: MetaV1Time!
  deletionTimestamp: MetaV1Time
  labels: StringMap
  annotations: StringMap
  ownerReferences: [MetaV1OwnerReference!]!
}

# https://pkg.go.dev/k8s.io/apimachinery/pkg/apis/meta/v1#OwnerReference
type MetaV1OwnerReference {
  apiVersion: String!
  kind: String!
  name: String!
  uid: ID!
  controller: Boolean
}

# https://pkg.go.dev/k8s.io/apimachinery/pkg/apis/meta/v1#ResourceVersionMatch
enum MetaV1ResourceVersionMatch {
  NotOlderThan
  Exact
}

# --- PageInfo ---

type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: ID

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: ID
}

# --- PodLogQueryResponse ---

type PodLogQueryResponse {
  results: [LogRecord!]!
  pageInfo: PageInfo!
}

# --- Watch ---

# https://pkg.go.dev/k8s.io/apimachinery/pkg/watch#EventType
enum WatchEventType {
  ADDED
  MODIFIED
  DELETED
  BOOKMARK
  ERROR
}

# --- Root operations ---

type Query {
  """
  AppsV1 queries
  """
  appsV1DaemonSetsGet(kubeContext: String, namespace: String, name: String!, options: MetaV1GetOptions): AppsV1DaemonSet
  appsV1DaemonSetsList(kubeContext: String, namespace: String, options: MetaV1ListOptions): AppsV1DaemonSetList
  appsV1DeploymentsGet(kubeContext: String, namespace: String, name: String!, options: MetaV1GetOptions): AppsV1Deployment
  appsV1DeploymentsList(kubeContext: String, namespace: String, options: MetaV1ListOptions): AppsV1DeploymentList
  appsV1ReplicaSetsGet(kubeContext: String, namespace: String, name: String!, options: MetaV1GetOptions): AppsV1ReplicaSet
  appsV1ReplicaSetsList(kubeContext: String, namespace: String, options: MetaV1ListOptions): AppsV1ReplicaSetList
  appsV1StatefulSetsGet(kubeContext: String, namespace: String, name: String!, options: MetaV1GetOptions): AppsV1StatefulSet
  appsV1StatefulSetsList(kubeContext: String, namespace: String, options: MetaV1ListOptions): AppsV1StatefulSetList

  """
  BatchV1 queries
  """
  batchV1CronJobsGet(kubeContext: String, namespace: String, name: String!, options: MetaV1GetOptions): BatchV1CronJob
  batchV1CronJobsList(kubeContext: String, namespace: String, options: MetaV1ListOptions): BatchV1CronJobList
  batchV1JobsGet(kubeContext: String, namespace: String, name: String!, options: MetaV1GetOptions): BatchV1Job
  batchV1JobsList(kubeContext: String, namespace: String, options: MetaV1ListOptions): BatchV1JobList

  """
  CoreV1 queries
  """
  coreV1NamespacesList(kubeContext: String, options: MetaV1ListOptions): CoreV1NamespaceList
  coreV1NodesList(kubeContext: String, options: MetaV1ListOptions): CoreV1NodeList
  coreV1PodsGet(kubeContext: String, namespace: String, name: String!, options: MetaV1GetOptions): CoreV1Pod
  coreV1PodsList(kubeContext: String, namespace: String, options: MetaV1ListOptions): CoreV1PodList
  coreV1ServicesGet(kubeContext: String, namespace: String, name: String!, options: MetaV1GetOptions): CoreV1Service
  coreV1ServicesList(kubeContext: String, namespace: String, options: MetaV1ListOptions): CoreV1ServiceList

  """
  Cluster API
  """
  clusterAPIReadyWait(kubeContext: String, namespace: String, serviceName: String): Boolean!
  clusterAPIHealthzGet(kubeContext: String, namespace: String, serviceName: String): HealthCheckResponse!
  clusterAPIServicesList(kubeContext: String): CoreV1ServiceList

  """
  Helm
  """
  helmListReleases(kubeContext: String): [HelmRelease!]

  """
  KubeConfig queries
  """
  kubeConfigGet: KubeConfig

  """
  Kubernetes API
  """
  kubernetesAPIReadyWait(kubeContext: String): Boolean!
  kubernetesAPIHealthzGet(kubeContext: String): HealthCheckResponse!

  """
  Pod logs API
  """
  podLogHead(
    kubeContext: String,
    namespace: String,
    name: String!,
    container: String,

    """
    Returns log records that came after the specified cursor.
    """
    after: ID,

    """
    Returns log records that came since the specified option (e.g. "BEGINNING", "PT5M", "2006-01-02T15:04:05Z07:00")
    """
    since: String = "BEGINNING",

    """
    Return the first _n_ results
    """
    first: Int = 100 @validate(rule: "gte=0", message: "Value must be >= 0"),
  ): PodLogQueryResponse @nullIfValidationFailed

  podLogTail(
    kubeContext: String,
    namespace: String,
    name: String!,
    container: String,

    """
    Returns log records that came before the specified cursor.
    """
    before: ID,

    """
    Return the last _n_ results
    """
    last: Int = 100 @validate(rule: "gt=0", message: "Value must be > 0")
  ): PodLogQueryResponse @nullIfValidationFailed
}

type Mutation {
  """
  Helm mutations
  """
  helmInstallLatest(kubeContext: String): HelmRelease
}

type Subscription {
  """
  AppsV1 watchers
  """
  appsV1DaemonSetsWatch(kubeContext: String, namespace: String, options: MetaV1ListOptions): AppsV1DaemonSetsWatchEvent
  appsV1DeploymentsWatch(kubeContext: String, namespace: String, options: MetaV1ListOptions): AppsV1DeploymentsWatchEvent
  appsV1ReplicaSetsWatch(kubeContext: String, namespace: String, options: MetaV1ListOptions): AppsV1ReplicaSetsWatchEvent
  appsV1StatefulSetsWatch(kubeContext: String, namespace: String, options: MetaV1ListOptions): AppsV1StatefulSetsWatchEvent

  """
  BatchV1 watchers
  """
  batchV1CronJobsWatch(kubeContext: String, namespace: String, options: MetaV1ListOptions): BatchV1CronJobsWatchEvent
  batchV1JobsWatch(kubeContext: String, namespace: String, options: MetaV1ListOptions): BatchV1JobsWatchEvent

  """
  CoreV1 watchers
  """
  coreV1NamespacesWatch(kubeContext: String, options: MetaV1ListOptions): CoreV1NamespacesWatchEvent
  coreV1NodesWatch(kubeContext: String, options: MetaV1ListOptions): CoreV1NodesWatchEvent
  coreV1PodsWatch(kubeContext: String, namespace: String, options: MetaV1ListOptions): CoreV1PodsWatchEvent
  coreV1ServicesWatch(kubeContext: String, namespace: String, options: MetaV1ListOptions): CoreV1ServicesWatchEvent  

  """
  Kubernetes API
  """
  kubernetesAPIHealthzWatch(kubeContext: String): HealthCheckResponse!

  """
  Cluster API
  """
  clusterAPIHealthzWatch(kubeContext: String, namespace: String, serviceName: String): HealthCheckResponse!
  clusterAPIServicesWatch(kubeContext: String): CoreV1ServicesWatchEvent

  """
  KubeConfig watchers
  """
  kubeConfigWatch: KubeConfigWatchEvent

  """
  Pod logs API
  """
  podLogFollow(
    kubeContext: String,
    namespace: String
    name: String!
    container: String

    """
    Returns log records that came after the specified cursor
    """
    after: ID

    """
    Returns log records that came since the specified option (e.g. "NOW", "2006-01-02T15:04:05Z07:00")
    """
    since: String = "NOW"
  ): LogRecord @nullIfValidationFailed
}

# --- Helpers ---

"""
A 64-bit integer.
"""
scalar Int64

"""
An ISO-8601 encoded UTC date string.
"""
scalar MetaV1Time

"""
An arbitrary dictionary with string values
"""
scalar StringMap

"""
An ISO-8601 encoded UTC date string.
"""
scalar Time
